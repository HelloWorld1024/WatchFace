package com.toycloudlibrary.view.clock;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.RectF;
import android.graphics.Typeface;
import android.graphics.drawable.Drawable;
import android.os.Handler;
import android.os.SystemClock;
import android.support.annotation.Nullable;
import android.text.format.DateUtils;
import android.text.format.Time;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.View.OnClickListener;
import com.toycloudlibrary.R.drawable;
import com.toycloudlibrary.R.string;
import com.toycloudlibrary.R.styleable;

public class ToyCloudAnalogClock
  extends View
{
  private static final String TAG = ToyCloudAnalogClock.class.getSimpleName();
  private boolean drawDayAndWeek = false;
  private boolean drawSecond = true;
  private Time mCalendar;
  private boolean mChanged;
  private RectF mClickRectF = new RectF();
  private String mDay = "";
  private Drawable mDial;
  private int mDialHeight;
  private int mDialWidth;
  private final Handler mHandler = new Handler();
  private float mHour;
  private Drawable mHourHand;
  private Drawable mMinuteHand;
  private float mMinutes;
  private Paint mPaint;
  private Drawable mRobotHand;
  private float mSecond;
  private Drawable mSecondHand;
  private Runnable mTicker;
  private boolean mTickerStopped = false;
  private String mWeek = "";
  private View.OnClickListener onClickRobotListener = null;
  
  public ToyCloudAnalogClock(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public ToyCloudAnalogClock(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 0);
  }
  
  public ToyCloudAnalogClock(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    Resources localResources = getContext().getResources();
    paramContext = paramContext.obtainStyledAttributes(paramAttributeSet, R.styleable.LongAnalogClock, paramInt, 0);
    this.mDial = paramContext.getDrawable(R.styleable.LongAnalogClock_long_dial);
    this.mHourHand = paramContext.getDrawable(R.styleable.LongAnalogClock_long_hand_hour);
    this.mMinuteHand = paramContext.getDrawable(R.styleable.LongAnalogClock_long_hand_minute);
    this.mSecondHand = paramContext.getDrawable(R.styleable.LongAnalogClock_long_hand_second);
    this.mRobotHand = paramContext.getDrawable(R.styleable.LongAnalogClock_long_hand_robot);
    if (this.mDial == null) {
      this.mDial = localResources.getDrawable(R.drawable.default_dial);
    }
    if (this.mHourHand == null) {
      this.mHourHand = localResources.getDrawable(R.drawable.long_tc_clock_hour);
    }
    if (this.mMinuteHand == null) {
      this.mMinuteHand = localResources.getDrawable(R.drawable.long_tc_clock_minute);
    }
    if (this.mSecondHand == null) {
      this.mSecondHand = localResources.getDrawable(R.drawable.long_tc_clock_second);
    }
    if (this.mRobotHand == null) {
      this.mRobotHand = localResources.getDrawable(R.drawable.long_tc_clock_dial_robot);
    }
    paramContext.recycle();
    this.mDialWidth = this.mDial.getIntrinsicWidth();
    this.mDialHeight = this.mDial.getIntrinsicHeight();
    this.mPaint = new Paint();
    this.mPaint.setColor(Color.parseColor("#3399ff"));
    this.mPaint.setTypeface(Typeface.DEFAULT_BOLD);
    this.mPaint.setFakeBoldText(true);
    this.mPaint.setAntiAlias(true);
    this.mPaint.setTextSize(20.0F);
    if (this.mCalendar == null) {
      this.mCalendar = new Time();
    }
  }
  
  private float dpToPx(float paramFloat)
  {
    return getContext().getResources().getDisplayMetrics().density * paramFloat;
  }
  
  private String getWeek(int paramInt)
  {
    switch (paramInt)
    {
    default: 
      return "";
    case 1: 
      return getContext().getString(R.string.long_analog_clock_monday);
    case 2: 
      return getContext().getString(R.string.long_analog_clock_tuesday);
    case 3: 
      return getContext().getString(R.string.long_analog_clock_wednesday);
    case 4: 
      return getContext().getString(R.string.long_analog_clock_thursday);
    case 5: 
      return getContext().getString(R.string.long_analog_clock_friday);
    case 6: 
      return getContext().getString(R.string.long_analog_clock_saturday);
    }
    return getContext().getString(R.string.long_analog_clock_sunday);
  }
  
  private void onTimeChanged()
  {
    this.mCalendar.setToNow();
    int i = this.mCalendar.hour;
    int j = this.mCalendar.minute;
    int k = this.mCalendar.second;
    this.mDay = (String.valueOf(this.mCalendar.month + 1) + "-" + String.valueOf(this.mCalendar.monthDay));
    this.mDay = (this.mDay + " " + getWeek(this.mCalendar.weekDay));
    this.mHour = (i + this.mMinutes / 60.0F + this.mSecond / 3600.0F);
    this.mMinutes = (j + k / 60.0F);
    this.mSecond = k;
    this.mChanged = true;
    updateContentDescription(this.mCalendar);
  }
  
  private void onTimeChanged222()
  {
    this.mCalendar.setToNow();
    int i = this.mCalendar.hour;
    int j = this.mCalendar.minute;
    int k = this.mCalendar.second;
    this.mDay = (String.valueOf(this.mCalendar.year) + "-" + String.valueOf(this.mCalendar.month + 1) + "-" + String.valueOf(this.mCalendar.monthDay));
    this.mWeek = getWeek(this.mCalendar.weekDay);
    this.mHour = (i + this.mMinutes / 60.0F + this.mSecond / 3600.0F);
    this.mMinutes = (j + k / 60.0F);
    this.mSecond = k;
    this.mChanged = true;
    updateContentDescription(this.mCalendar);
  }
  
  private void updateContentDescription(Time paramTime)
  {
    setContentDescription(DateUtils.formatDateTime(getContext(), paramTime.toMillis(false), 129));
  }
  
  public Drawable getDial()
  {
    return this.mDial;
  }
  
  public Drawable getHourHand()
  {
    return this.mHourHand;
  }
  
  public Drawable getMinuteHand()
  {
    return this.mMinuteHand;
  }
  
  public Drawable getRobotHand()
  {
    return this.mRobotHand;
  }
  
  public Drawable getSecondHand()
  {
    return this.mSecondHand;
  }
  
  public boolean isDrawDayAndWeek()
  {
    return this.drawDayAndWeek;
  }
  
  public boolean isDrawSecond()
  {
    return this.drawSecond;
  }
  
  protected void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    start();
  }
  
  protected void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    stop();
  }
  
  protected void onDraw(Canvas paramCanvas)
  {
    super.onDraw(paramCanvas);
    boolean bool = this.mChanged;
    if (bool) {
      this.mChanged = false;
    }
    int n = getRight() - getLeft();
    int i1 = getBottom() - getTop();
    int j = n / 2;
    int k = i1 / 2;
    Drawable localDrawable = this.mDial;
    int i2 = localDrawable.getIntrinsicWidth();
    int m = localDrawable.getIntrinsicHeight();
    int i = 0;
    if ((n < i2) || (i1 < m))
    {
      i = 1;
      float f = Math.min(n / i2, i1 / m);
      paramCanvas.save();
      paramCanvas.scale(f, f, j, k);
    }
    if (bool) {
      localDrawable.setBounds(j - i2 / 2, k - m / 2, i2 / 2 + j, m / 2 + k);
    }
    localDrawable.draw(paramCanvas);
    paramCanvas.save();
    if ((bool) && (this.drawDayAndWeek))
    {
      n = (int)this.mPaint.measureText(this.mWeek);
      paramCanvas.drawText(this.mWeek, j - n / 2, k - m / 8, this.mPaint);
      n = (int)this.mPaint.measureText(this.mDay);
      paramCanvas.drawText(this.mDay, j - n / 2, m / 4 + k, this.mPaint);
    }
    
    //时针
    paramCanvas.rotate(this.mHour / 12.0F * 360.0F, j, k);
    localDrawable = this.mHourHand;
    if (bool)
    {
      m = localDrawable.getIntrinsicWidth();
      n = localDrawable.getIntrinsicHeight();
      localDrawable.setBounds(j - m / 2, k - n / 2, m / 2 + j, n / 2 + k);
    }
    localDrawable.draw(paramCanvas);
    paramCanvas.restore();
    
    
    //分针
    paramCanvas.save();
    paramCanvas.rotate(this.mMinutes / 60.0F * 360.0F, j, k);
    localDrawable = this.mMinuteHand;
    if (bool)
    {
      m = localDrawable.getIntrinsicWidth();
      n = localDrawable.getIntrinsicHeight();
      localDrawable.setBounds(j - m / 2, k - n / 2, m / 2 + j, n / 2 + k);
    }
    localDrawable.draw(paramCanvas);
    paramCanvas.restore();
    //
    
    
    //秒针
    if (this.drawSecond)
    {
      paramCanvas.save();
      paramCanvas.rotate(this.mSecond / 60.0F * 360.0F, j, k);
      localDrawable = this.mSecondHand;
      if (bool)
      {
        m = localDrawable.getIntrinsicWidth();
        n = localDrawable.getIntrinsicHeight();
        localDrawable.setBounds(j - m / 2, k - n / 2, m / 2 + j, n / 2 + k);
      }
      localDrawable.draw(paramCanvas);
      paramCanvas.restore();
    }
    paramCanvas.save();
    localDrawable = this.mRobotHand;
    if (bool)
    {
      m = localDrawable.getIntrinsicWidth();
      n = localDrawable.getIntrinsicHeight();
      localDrawable.setBounds(j - m / 2, k - n / 2, m / 2 + j, n / 2 + k);
    }
    localDrawable.draw(paramCanvas);
    paramCanvas.restore();
    if (i != 0) {
      paramCanvas.restore();
    }
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    int i = View.MeasureSpec.getMode(paramInt1);
    int j = View.MeasureSpec.getSize(paramInt1);
    int k = View.MeasureSpec.getMode(paramInt2);
    int m = View.MeasureSpec.getSize(paramInt2);
    float f2 = 1.0F;
    float f3 = 1.0F;
    float f1 = f2;
    if (i != 0)
    {
      f1 = f2;
      if (j < this.mDialWidth) {
        f1 = j / this.mDialWidth;
      }
    }
    f2 = f3;
    if (k != 0)
    {
      f2 = f3;
      if (m < this.mDialHeight) {
        f2 = m / this.mDialHeight;
      }
    }
    f1 = Math.min(f1, f2);
    setMeasuredDimension(resolveSizeAndState((int)(this.mDialWidth * f1), paramInt1, 0), resolveSizeAndState((int)(this.mDialHeight * f1), paramInt2, 0));
  }
  
  protected void onSizeChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    super.onSizeChanged(paramInt1, paramInt2, paramInt3, paramInt4);
    this.mClickRectF.set(paramInt1 / 4, paramInt2 / 4, paramInt1 - paramInt1 / 4, paramInt2 - paramInt2 / 4);
    this.mChanged = true;
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    int i = paramMotionEvent.getAction();
    float f1 = paramMotionEvent.getX();
    float f2 = paramMotionEvent.getY();
    Log.d(TAG, "onTouchEvent: action " + i + " " + f1 + " " + f2);
    switch (i)
    {
    }
    for (;;)
    {
      return super.onTouchEvent(paramMotionEvent);
      if ((this.mClickRectF.contains(f1, f2)) && (this.onClickRobotListener != null)) {
        this.onClickRobotListener.onClick(this);
      }
    }
  }
  
  public void setDial(Drawable paramDrawable)
  {
    this.mDial = paramDrawable;
  }
  
  public void setDrawDayAndWeek(boolean paramBoolean)
  {
    this.drawDayAndWeek = paramBoolean;
  }
  
  public void setDrawSecond(boolean paramBoolean)
  {
    this.drawSecond = paramBoolean;
  }
  
  public void setHourHand(Drawable paramDrawable)
  {
    this.mHourHand = paramDrawable;
  }
  
  public void setMinuteHand(Drawable paramDrawable)
  {
    this.mMinuteHand = paramDrawable;
  }
  
  public void setOnClickRobotListener(@Nullable View.OnClickListener paramOnClickListener)
  {
    this.onClickRobotListener = paramOnClickListener;
  }
  
  public void setRobotHand(Drawable paramDrawable)
  {
    this.mRobotHand = paramDrawable;
  }
  
  public void setSecondHand(Drawable paramDrawable)
  {
    this.mSecondHand = paramDrawable;
  }
  
  public void setTextSize(float paramFloat)
  {
    if (this.mPaint != null) {
      this.mPaint.setTextSize(dpToPx(paramFloat));
    }
  }
  
  public void start()
  {
    this.mTickerStopped = false;
    if (this.mTicker == null) {
      this.mTicker = new Runnable()
      {
        public void run()
        {
          if (ToyCloudAnalogClock.this.mTickerStopped) {
            return;
          }
          ToyCloudAnalogClock.this.onTimeChanged();
          ToyCloudAnalogClock.this.invalidate();
          long l = SystemClock.uptimeMillis();
          ToyCloudAnalogClock.this.mHandler.postAtTime(ToyCloudAnalogClock.this.mTicker, l + (1000L - l % 1000L));
        }
      };
    }
    for (;;)
    {
      this.mHandler.post(this.mTicker);
      return;
      this.mHandler.removeCallbacks(this.mTicker);
    }
  }
  
  public void stop()
  {
    this.mTickerStopped = true;
  }
}

